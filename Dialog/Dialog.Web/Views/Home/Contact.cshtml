@model QuestionViewModel

@{
    var partialModel = new JumbotronPartialViewModel
    {
        Title = "Contact Us",
        Current = "Contact",
        HasSearchField = false,
        ImageUri = "https://res.cloudinary.com/aguzelov/image/upload/v1544704896/jwebhaqkfcubfboaktko.jpg"
    };
}

<partial name="~/Views/Shared/_JumbotronPartial.cshtml" model=@partialModel />
@{
    var info = (ContactViewModel)ViewData["ContactInfo"];
}
<section class="ftco-section contact-section ftco-degree-bg">
    <div class="container">
        <div class="row d-flex mb-5 contact-info">

            <div class="col-md-12 mb-4">
                <h2 class="h4">Contact Information</h2>
            </div>
            <div class="w-100"></div>
            <div class="col-md-4">
                <p><span>Address:</span> @info.Address </p>
            </div>
            <div class="col-md-4 text-center">
                <p><span>Phone:</span> <a href="tel://@(info.Phone)">@info.Phone</a></p>
            </div>
            <div class="col-md-4 text-right">
                <p><span>Email:</span> <a href="mailto:@(info.Email)">@info.Email</a></p>
            </div>
        </div>
        <div class="row block-9">
            <div class="col-md-6 pr-md-5">
                <h4 class="mb-4">Do you have any questions?</h4>
                <form asp-area="" asp-controller="Home" asp-action="Contact" method="post">
                    <div class="form-group">
                        <input class="form-control" asp-for="@Model.Name" placeholder="Your @(nameof(Model.Name))">
                        <span asp-validation-for="@Model.Name"></span>
                    </div>
                    <div class="form-group">
                        <input class="form-control" asp-for="@Model.Email" placeholder="Your @(nameof(Model.Email))">
                        <span asp-validation-for="@Model.Email"></span>
                    </div>
                    <div class="form-group">
                        <input class="form-control" asp-for="@Model.Subject" placeholder="@(nameof(Model.Subject))">
                        <span asp-validation-for="@Model.Subject"></span>
                    </div>
                    <div class="form-group">
                        <textarea cols="30" rows="5" class="form-control" asp-for="@Model.Message" placeholder="@(nameof(Model.Message))"></textarea>
                        <span asp-validation-for="@Model.Message"></span>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Send Message" class="btn btn-primary py-3 px-5">
                    </div>
                </form>
            </div>
            <div class="col-md-6 pr-md-5" id="mapContainer"></div>
        </div>
    </div>
</section>

@section scripts {
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1542186754" />
    <script src="https://js.api.here.com/v3/3.0/mapsjs-core.js"
            type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.0/mapsjs-service.js"
            type="text/javascript" charset="utf-8"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-ui.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-mapevents.js"></script>
    <script type="text/javascript" charset="UTF-8">

        /*Moves the map to display over Berlin*/
        @*@param  {H.Map} map      A HERE Map instance within the application*@

        function moveMapToSredec(map){
            map.setCenter({ lat: 42.345963, lng: 27.182067});
            map.setZoom(15);
            var dialogMarker = new H.map.Marker({
                lat: 42.345963,
                lng: 27.182067
            });
            map.addObject(dialogMarker);
        }

/**
 * Boilerplate map initialization code starts below:
 */

//Step 1: initialize communication with the platform
        var platform = new H.service.Platform({
            'app_id': '@info.HereAppId',
            'app_code': '@info.HereAppCode',
            useHTTPS: true
        });
        var pixelRatio = window.devicePixelRatio || 1;
        var defaultLayers = platform.createDefaultLayers({
            tileSize: pixelRatio === 1 ? 256 : 512,
            ppi: pixelRatio === 1 ? undefined : 320
        });

//Step 2: initialize a map  - not specificing a location will give a whole world view.
        var map = new H.Map(document.getElementById('mapContainer'),
            defaultLayers.normal.map, { pixelRatio: pixelRatio });

//Step 3: make the map interactive
// MapEvents enables the event system
// Behavior implements default interactions for pan/zoom (also on mobile touch environments)
        var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

// Create the default UI components
        var ui = H.ui.UI.createDefault(map, defaultLayers);

// Now use the map as required...
        moveMapToSredec(map);
    </script>

}